openapi: 3.0.0

info:
  title: Proxy
  version: v1

servers:
  - url: http://localhost:8080

tags:
  - name: proxy
    description: Proxy

paths:
  /apis/core/1/{path}:
    get:
      summary: Proxy GET request
      tags:
        - proxy
      parameters:
        - in: path
          required: true
          name: path
          schema:
            type: string
          description: Path to proxy
      responses:
        200:
          description: Successful response
        500:
          description: Internal server error
        504:
          description: Gateway timeout
    post:
      summary: Proxy POST request
      tags:
        - proxy
      parameters:
        - in: path
          name: path
          schema:
            type: string
          description: Path to proxy
      responses:
        200:
          description: Successful response from API Core
        500:
          description: Internal server error
        504:
          description: Gateway timeout
    put:
      summary: Proxy PUT request
      tags:
        - proxy
      parameters:
        - in: path
          name: path
          schema:
            type: string
          description: Path to proxy
      responses:
        200:
          description: Successful response
        500:
          description: Internal server error
        504:
          description: Gateway timeout
    delete:
      summary: Proxy DELETE request
      tags:
        - proxy
      parameters:
        - in: path
          name: path
          schema:
            type: string
          required: true
          description: Path to proxy
      responses:
        200:
          description: Successful response from API Core
        500:
          description: Internal server error
        504:
          description: Gateway timeout
  /apis/core/1/api/author/find:
    get:
      summary: Retrieves all authors.
      parameters:
        - in: query
          name: term
          schema:
            type: string
          description: Term to search for in author names
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  authors:
                    type: array
                    items:
                      $ref: "#/components/schemas/AuthorEntity"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /apis/core/1/api/author/new:
    post:
      summary: Creates a new author.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorEntity"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  author:
                    $ref: "#/components/schemas/AuthorEntity"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /apis/core/1/api/author/{id}:
    get:
      summary: Retrieves a single author by ID.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Author ID
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  author:
                    $ref: "#/components/schemas/AuthorEntity"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      summary: Updates an existing author.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Author ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorEntity"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  author:
                    $ref: "#/components/schemas/AuthorEntity"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    delete:
      summary: Deletes an author by ID.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Author ID
      responses:
        204:
          description: No Content
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /apis/core/1/api/branch/:
    get:
      tags:
        - branch
      summary: List all branches
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Branch"
        "404":
          description: No branches found
  /apis/core/1/api/branch/{id}:
    get:
      tags:
        - branch
      summary: Show a branch by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Branch ID
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Branch"
        "400":
          description: Invalid ID
        "404":
          description: Branch not found
    put:
      tags:
        - branch
      summary: Update a branch
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Branch ID
      requestBody:
        description: Branch data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Branch"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Branch"
        "400":
          description: Invalid ID or Bad request or Branch not valid
        "500":
          description: Branch not updated
  /apis/core/1/api/condition/:
    get:
      summary: Get all conditions
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Condition"
        500:
          description: Internal Server Error
  /apis/core/1/api/condition/new:
    post:
      summary: Create a new condition
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Condition"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Condition"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  /apis/core/1/api/condition/{id}:
    get:
      summary: Get a condition by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Condition ID
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Condition"
        400:
          description: Bad Request
        404:
          description: Not Found
    put:
      summary: Update a condition
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Condition ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Condition"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Condition"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
    delete:
      summary: Delete a condition
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Condition ID
      responses:
        204:
          description: No Content
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  /apis/core/1/api/tag/:
    get:
      summary: Get all tags
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
        500:
          description: Internal Server Error
  /apis/core/1/api/tag/new:
    post:
      summary: Create a new tag
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tag"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  /apis/core/1/api/tag/{id}:
    get:
      summary: Get a tag by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Tag ID
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        400:
          description: Bad Request
        404:
          description: Tag not found
        500:
          description: Internal Server Error
    put:
      summary: Update a tag
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Tag ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tag"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        400:
          description: Bad Request
        403:
          description: Forbidden
        500:
          description: Internal Server Error
    delete:
      summary: Delete a tag
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Tag ID
      responses:
        204:
          description: No Content
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Tag not found
        500:
          description: Internal Server Error
  /apis/core/1/api/genre:
    get:
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Genre"
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /apis/core/1/api/genre/new:
    post:
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Genre"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Genre"

        "400":
          description: Invalid request payload / Validation failed
        "401":
          description: Unauthorized
        "500":
          description: Failed to create genre
  /apis/core/1/api/genre/{id}:
    get:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Genre"
        "400":
          description: Invalid ID
        "401":
          description: Unauthorized
        "404":
          description: Genre not found
    put:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Genre"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Genre"
        "400":
          description: Invalid ID / Invalid request payload / Validation failed
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Failed to update genre
    delete:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid ID
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Genre not found
        "500":
          description: Failed to delete genre
  /apis/core/1/api/format:
    get:
      summary: Get all formats for the authenticated user's branch
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Format"
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /apis/core/1/api/format/new:
    post:
      summary: Create a new format
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Format"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Format"
        "400":
          description: Bad Request or Validation Failed
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /apis/core/1/api/format/{id}:
    get:
      summary: Get a format by ID for the authenticated user's branch
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Format ID
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Format"
        "400":
          description: Invalid ID
        "401":
          description: Unauthorized
        "403":
          description: Forbidden (user does not have access to this format)
        "404":
          description: Format not found
        "500":
          description: Internal Server Error
    put:
      summary: Update an existing format
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Format ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Format"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Format"
        "400":
          description: Bad Request, Invalid ID, or Validation Failed
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Format not found
        "500":
          description: Internal Server Error
    delete:
      summary: Delete a format by ID for the authenticated user's branch
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Format ID
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid ID
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Format not found
        "500":
          description: Internal Server Error
  /apis/core/1/api/reservation/list:
    get:
      summary: Get all reservations
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Reservation"
        "500":
          description: Internal Server Error
  /apis/core/1/api/reservation/status:
    get:
      summary: Get open reservation status
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  open:
                    type: integer
                    format: int64
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /apis/core/1/api/reservation/{id}:
    get:
      summary: Get a reservation by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Reservation UUID
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reservation"
        "400":
          description: Invalid UUID
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Reservation not found
        "500":
          description: Internal Server Error
    put:
      summary: Update a reservation
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Reservation UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reservation"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reservation"
        "400":
          description: Invalid UUID or reservation data
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Reservation not found
        "500":
          description: Failed to update
    delete:
      summary: Delete a reservation
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Reservation UUID
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid UUID
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Reservation not found
        "500":
          description: Failed to delete
  /apis/core/1/api/reservation/new:
    post:
      summary: Create a new reservation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reservation"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reservation"
        "400":
          description: Invalid reservation data
        "401":
          description: Unauthorized
        "500":
          description: Failed to create reservation
  /apis/core/1/api/public/genre/{id}:
    get:
      summary: Get genresfor a branch by ID
  /apis/core/1/api/public/branch/:
    get:
      tags:
        - branch
      summary: List all public branches
  /apis/core/1/api/public/book/{id}:
    get:
      summary: Get a public book by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Public Book UUID
          example: 0a1f2e74-d220-64cb-ff12-532ffa713976
  /apis/core/1/api/inventory:
    get:
      summary: List all inventory items
      tags:
        - inventory
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Branch"
        "500":
          description: Internal Server Error
  /apis/core/1/api/public/branch/show/{id}:
    get:
      tags:
        - branch
      summary: Get a public branch by ID
      responses:
        400:
          description: Invalid UUID
        404:
          description: Public Book not found
        500:
          description: Internal Server Error
  /apis/core/1/api/public/book/recommendation/{branch}:
    get:
      summary: Get recommended books for a specific branch
      parameters:
        - in: path
          name: branch
          schema:
            type: string
          required: true
          description: Branch ID
      responses:
        500:
          description: Internal Server Error
  /apis/core/1/api/inventory/new:
    post:
      summary: Create a new inventory item
      tags:
        - inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Inventory"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Inventory"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  /apis/core/1/api/inventory/{id}:
    get:
      summary: Get an inventory item by ID
      tags:
        - inventory
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Branch ID
          example: 1
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Genre"
        "400":
          description: Invalid ID
        "403":
          description: Access forbidden
        "404":
          description: Branch not found
        400:
          description: Invalid Branch ID
        404:
          description: Branch not found
        500:
          description: Internal Server Error
  /apis/core/1/api/public/book/cover/{id}:
    get:
      summary: Get the cover image of a book by ID and dimensions
      responses:
        400:
          description: Invalid ID
        404:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Inventory"
          description: Not Found
    put:
      summary: Update an inventory item by ID
      tags:
        - inventory
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          description: Book uuid
          example: "0a1f2e74-d220-64cb-ff12-532ffa713976_400x400.jpg"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Inventory"
      responses:
        200:
          description: OK
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        400:
          description: Invalid UUID or dimensions format
        404:
          description: Book not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Inventory"
        500:
          description: Internal Server Error
    delete:
      summary: Delete an inventory item by ID
      tags:
        - inventory
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Inventory ID
          example: 1
      responses:
        204:
          description: No Content
        400:
          description: Invalid ID
        500:
          description: Internal Server Error
  /apis/core/1/api/book/cover/{id}:
    get:
      summary: Get all cover images for a book by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Book UUID
      responses:
        200:
          description: Cover images for the book
          content:
            application/json:
              schema:
                type: object
                properties:
                  cover_s:
                    type: string
                    description: Small cover image (base64)
                  cover_m:
                    type: string
                    description: Medium cover image (base64)
                  cover_l:
                    type: string
                    description: Large cover image (base64)
        400:
          description: Invalid book id
          content:
            application/json:
              schema:
                type: object
        404:
          description: Book not found
    delete:
      summary: Delete all cover images for a book by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Book ID
      responses:
        200:
          description: Cover images deleted
        400:
          description: Invalid book ID
        401:
          description: Unauthorized
        403:
          description: Forbidden

  /apis/core/1/api/book/inventory/found/{id}:
    put:
      summary: Mark a book as found in the active inventory for the authenticated user's branch
      tags:
        - book
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Book UUID
      responses:
        200:
          description: The updated book
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        400:
          description: Invalid book id
        401:
          description: Unauthorized
        404:
          description: Book or active inventory not found
        500:
          description: Internal Server Error

  /apis/core/1/api/book/inventory/notfound/{id}:
    put:
      summary: Mark a book as not found in the active inventory for the authenticated user's branch
      tags:
        - book
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Book UUID
      responses:
        200:
          description: The updated book
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        400:
          description: Invalid book id
        401:
          description: Unauthorized
        404:
          description: Book or active inventory not found
        500:
          description: Internal Server Error

  /apis/core/1/api/book/sell/{id}:
    put:
      summary: Mark or unmark a book as sold for the authenticated user's branch
      tags:
        - book
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Book UUID
      responses:
        200:
          description: The updated book
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        400:
          description: Invalid book id
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Book not found
        500:
          description: Internal Server Error

  /apis/core/1/api/book/stats:
    get:
      summary: Get statistics for books in the authenticated user's branch
      responses:
        200:
          description: Statistics for the branch
          content:
            application/json:
              schema:
                type: object
                properties:
                  all:
                    type: integer
                    format: int64
                    description: Total number of books for the branch
                  available:
                    type: integer
                    format: int64
                    description: Books available (not sold, not removed, not reserved)
                  reserved:
                    type: integer
                    format: int64
                    description: Number of reserved books
                  sold:
                    type: integer
                    format: int64
                    description: Number of sold books
                  removed:
                    type: integer
                    format: int64
                    description: Number of removed books
                  storage:
                    type: number
                    format: float
                    description: Size of storage under data directory in megabytes
        401:
          description: Unauthorized
        500:
          description: Internal Server Error
  /apis/core/1/api/book/clean:
    delete:
      summary: Delete all books for the authenticated user's branch that are sold or removed
      responses:
        200:
          description: Cleaned up successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Cleaned up successfully!
        401:
          description: Unauthorized
        403:
          description: Forbidden
        500:
          description: Internal Server Error

components:
  schemas:
    AuthorEntity:
      type: object
      properties:
        firstname:
          type: string
        surname:
          type: string
    Branch:
      type: object
      properties:
        name:
          type: string
        steps:
          type: number
          format: float
        currency:
          type: string
        ordering:
          type: string
        public:
          type: boolean
        pricelist:
          type: string
        cart:
          type: boolean
        content:
          type: string
      required:
        - name
        - currency
    Condition:
      type: object
      properties:
        name:
          type: string
    Tag:
      type: object
      properties:
        name:
          type: string
        branch_id:
          type: integer
    Genre:
      type: object
      properties:
        name:
          type: string
    Format:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        branch_id:
          type: integer
          format: int64
    Reservation:
      type: object
      properties:
        notes:
          type: string
        books:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
        salutation:
          type: string
        firstname:
          type: string
        surname:
          type: string
        mail:
          type: string
        phone:
          type: string
        open:
          type: boolean
    PublicBook:
      type: object
      properties:
        id:
          type: string
          format: uuid
        currency:
          type: string
        title:
          type: string
        authorFirstname:
          type: string
        authorSurname:
          type: string
        branch_id:
          type: integer
        shortDescription:
          type: string
        genre:
          type: string
        branchName:
          type: string
        branchOrdering:
          type: string
        price:
          type: number
          format: float
        releaseYear:
          type: integer
        cond:
          type: string
        format_name:
          type: string
        subtitle:
          type: string
    Inventory:
      type: object
      properties:
        startedAt:
          type: integer
          example: 1739548084
        endedAt:
          type: integer
          example: null
        found:
          type: integer
          example: 0
        notFound:
          type: integer
          example: 0
      required:
        - startedAt
        - found
        - notFound

    Book:
      type: object
      properties:
        id:
          type: string
          format: uuid
        branch_id:
          type: integer
        title:
          type: string
        shortDescription:
          type: string
        author_id:
          type: integer
        genre_id:
          type: integer
        price:
          type: number
          format: float
        sold:
          type: boolean
        removed:
          type: boolean
        reserved:
          type: boolean
        releaseYear:
          type: integer
        inventory:
          type: boolean
          nullable: true
      required:
        - id
        - title
